package com.example.focusflowbackend.controllers;

import com.example.focusflowbackend.models.UserProfile;
import com.example.focusflowbackend.services.UserProfileService;

import jakarta.annotation.PostConstruct;

import com.example.focusflowbackend.security.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/user-profile")
public class UserProfileController {

    private final UserProfileService userProfileService;
    private final JwtUtil jwtUtil;

    @Autowired
    public UserProfileController(UserProfileService userProfileService, JwtUtil jwtUtil) {
        this.userProfileService = userProfileService;
        this.jwtUtil = jwtUtil;
    }

    @PostConstruct
    public void init() {
        System.out.println("‚úÖ UserProfileController ƒë√£ ƒë∆∞·ª£c Spring Boot load th√†nh c√¥ng!");
    }

    // L·∫•y h·ªì s∆° user theo user_id
    @SuppressWarnings("null")
    @GetMapping("/{userId}")
    public ResponseEntity<UserProfile> getUserProfile(@PathVariable Long userId, @RequestHeader("Authorization") String token) {
        System.out.println("üöÄ [UserProfileController] API getUserProfile ƒë∆∞·ª£c g·ªçi v·ªõi userId: " + userId);
        System.out.println("üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω API...");

        try {
            System.out.println("üîÑ G·ªçi userProfileService.getProfileByUserId...");
            UserProfile userProfile = userProfileService.getProfileByUserId(userId);

            System.out.println("‚úÖ Truy v·∫•n th√†nh c√¥ng, k·∫øt qu·∫£: " + userProfile);
            return new ResponseEntity<>(userProfile, HttpStatus.OK);

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi truy v·∫•n user profile: " + e.getMessage());
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        }
    }

    // C·∫≠p nh·∫≠t h·ªì s∆° user
    @PutMapping("/{userId}")
    public ResponseEntity<UserProfile> updateUserProfile(@PathVariable Long userId, @RequestBody UserProfile updatedProfile, @RequestHeader("Authorization") String token) {
        try {
            // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a t·ª´ token
            token = token.trim();

            System.out.println("Received userId: " + userId);
            System.out.println("Received token: " + token); // Log token ƒë·ªÉ ki·ªÉm tra

            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ JWT
            Long currentUserId = jwtUtil.extractUserId(token);
            System.out.println("Extracted userId from token: " + currentUserId); // Log userId t·ª´ token

            // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn ch·ªânh s·ª≠a h·ªì s∆° c·ªßa m√¨nh kh√¥ng
            if (!userId.equals(currentUserId)) {
                return new ResponseEntity<>(HttpStatus.FORBIDDEN); // Tr·∫£ v·ªÅ 403 Forbidden n·∫øu kh√¥ng ph·∫£i ch√≠nh m√¨nh
            }

            // G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t h·ªì s∆°
            System.out.println("Calling userProfileService.updateProfile...");
            UserProfile updatedUserProfile = userProfileService.updateProfile(userId, updatedProfile);

            // Ki·ªÉm tra l·∫°i sau khi c·∫≠p nh·∫≠t
            System.out.println("Updated user profile: " + updatedUserProfile);
            return new ResponseEntity<>(updatedUserProfile, HttpStatus.OK);

        } catch (Exception e) {
            System.out.println("Error in updateUserProfile: " + e.getMessage()); // Log l·ªói ƒë·ªÉ d·ªÖ d√†ng x√°c ƒë·ªãnh
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND); // Tr·∫£ v·ªÅ 404 Not Found n·∫øu kh√¥ng t√¨m th·∫•y user
        }
    }

    // L·∫•y t·∫•t c·∫£ h·ªì s∆° user (d√†nh cho admin)
    @GetMapping("/admin/all")
    public ResponseEntity<List<UserProfile>> getAllUserProfiles(@RequestHeader("Authorization") String token) {
        try {
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ JWT
            String role = jwtUtil.extractRole(token);

            // Ch·ªâ cho ph√©p admin l·∫•y danh s√°ch
            if (!role.equals("ROLE_ADMIN")) {
                return new ResponseEntity<>(HttpStatus.FORBIDDEN); // Tr·∫£ v·ªÅ 403 Forbidden n·∫øu kh√¥ng ph·∫£i admin
            }

            List<UserProfile> userProfiles = userProfileService.getAllProfiles();
            return new ResponseEntity<>(userProfiles, HttpStatus.OK);

        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR); // Tr·∫£ v·ªÅ 500 n·∫øu c√≥ l·ªói x·∫£y ra
        }
    }
}
